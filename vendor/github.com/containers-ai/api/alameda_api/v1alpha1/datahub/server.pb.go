// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alameda_api/v1alpha1/datahub/server.proto

package datahub

import (
	context "context"
	fmt "fmt"
	events "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/events"
	gpu "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/gpu"
	licenses "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/licenses"
	metrics "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/metrics"
	plannings "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/plannings"
	predictions "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/predictions"
	rawdata "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/rawdata"
	recommendations "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/recommendations"
	resources "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/resources"
	scores "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/scores"
	weavescope "github.com/containers-ai/api/alameda_api/v1alpha1/datahub/weavescope"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	status "google.golang.org/genproto/googleapis/rpc/status"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status1 "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("alameda_api/v1alpha1/datahub/server.proto", fileDescriptor_debe19e3ad2e68a0)
}

var fileDescriptor_debe19e3ad2e68a0 = []byte{
	// 1848 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x9b, 0xdd, 0x8b, 0xdc, 0x54,
	0x1f, 0xc7, 0x7b, 0xe0, 0xe1, 0xa1, 0x9e, 0x96, 0xb5, 0x9d, 0xb6, 0xbb, 0xdb, 0xed, 0x9b, 0x14,
	0xbc, 0xf0, 0xc2, 0x0c, 0x7d, 0x53, 0xb4, 0x17, 0xb6, 0xfb, 0xd2, 0xd9, 0x76, 0x5f, 0x3a, 0x9d,
	0x69, 0xbb, 0xda, 0x17, 0x25, 0x9b, 0x39, 0x9d, 0x8d, 0x64, 0x92, 0x98, 0x64, 0xa6, 0x16, 0x8a,
	0x88, 0xa8, 0x88, 0x28, 0x28, 0x94, 0xea, 0x8d, 0x08, 0x0a, 0x42, 0x51, 0x44, 0xd1, 0x2a, 0xa8,
	0x58, 0xbc, 0x10, 0xa5, 0xde, 0x08, 0x5e, 0x09, 0x82, 0xff, 0x86, 0x97, 0x32, 0x93, 0xf3, 0x96,
	0x93, 0xe4, 0x24, 0x39, 0xc9, 0xc2, 0x7a, 0xd7, 0x76, 0xe6, 0xf7, 0xf9, 0x7e, 0xcf, 0xe4, 0xf7,
	0x72, 0x92, 0x9c, 0xc2, 0x47, 0x74, 0x4b, 0xef, 0xa1, 0x8e, 0xfe, 0x9c, 0xee, 0x9a, 0xf5, 0xc1,
	0x21, 0xdd, 0x72, 0xd7, 0xf4, 0x43, 0xf5, 0x8e, 0x1e, 0xe8, 0x6b, 0xfd, 0xd5, 0xba, 0x8f, 0xbc,
	0x01, 0xf2, 0x34, 0xd7, 0x73, 0x02, 0xa7, 0xf6, 0xb0, 0xe1, 0xd8, 0x81, 0x6e, 0xda, 0xc8, 0xf3,
	0x75, 0x53, 0xc3, 0x71, 0x1a, 0x89, 0xd1, 0x70, 0xcc, 0xd4, 0x61, 0x29, 0x11, 0x0d, 0x90, 0x1d,
	0xf8, 0x23, 0xb0, 0x69, 0x20, 0x3f, 0x44, 0x4f, 0xd5, 0xa5, 0x31, 0x5d, 0xb7, 0x2f, 0x06, 0x1c,
	0x95, 0x06, 0x58, 0xa6, 0x81, 0x6c, 0x1f, 0xc5, 0x64, 0x8e, 0x48, 0xa3, 0x7a, 0x28, 0xf0, 0x4c,
	0x23, 0x16, 0x74, 0x4c, 0x1a, 0xe4, 0x5a, 0xba, 0x6d, 0x9b, 0x76, 0x37, 0x16, 0xf6, 0xb8, 0x3c,
	0xcc, 0x43, 0x1d, 0xd3, 0x08, 0x4c, 0xc7, 0x2e, 0x68, 0xd2, 0xd3, 0xaf, 0x0f, 0xff, 0x28, 0x06,
	0x1d, 0x97, 0x07, 0x21, 0xc3, 0xe9, 0xf5, 0x90, 0xdd, 0xd1, 0x13, 0x15, 0x8f, 0x65, 0x04, 0xfb,
	0x4e, 0xdf, 0x33, 0xe2, 0xbf, 0xa6, 0xfc, 0x42, 0xfb, 0x86, 0xe3, 0xc5, 0x63, 0x1e, 0x93, 0xc6,
	0x5c, 0x47, 0xfa, 0x00, 0xf9, 0x86, 0xe3, 0x22, 0x31, 0x6e, 0x4f, 0xd7, 0x71, 0xba, 0x16, 0xaa,
	0x8f, 0xfe, 0xb6, 0xda, 0xbf, 0x56, 0x47, 0x3d, 0x37, 0xb8, 0x81, 0x3f, 0x9c, 0xc0, 0x1f, 0x7a,
	0xae, 0x51, 0xf7, 0x03, 0x3d, 0xe8, 0xe3, 0xa8, 0xc3, 0xff, 0xac, 0xc1, 0xb1, 0xd9, 0x90, 0xdd,
	0x0e, 0x79, 0xb5, 0x2e, 0xdc, 0x3a, 0xe3, 0x21, 0x3d, 0x40, 0x73, 0xa3, 0x44, 0xac, 0x9d, 0xd4,
	0x72, 0x65, 0xb5, 0x16, 0xe6, 0xad, 0xc6, 0xc7, 0xb6, 0xd0, 0x0b, 0x7d, 0xe4, 0x07, 0x53, 0x35,
	0x2d, 0xd4, 0xd7, 0x3c, 0xd7, 0xd0, 0xda, 0x23, 0xfd, 0x83, 0x9b, 0x6a, 0xef, 0x02, 0x08, 0x17,
	0x4d, 0x3f, 0xc0, 0x3a, 0x4f, 0x15, 0xd3, 0x61, 0x91, 0x44, 0xe5, 0x84, 0x3a, 0xc0, 0x77, 0x1d,
	0xdb, 0x47, 0x07, 0x37, 0xd5, 0x02, 0xb8, 0x33, 0x5c, 0x40, 0xc3, 0xed, 0x37, 0x59, 0x06, 0xd6,
	0x4e, 0xe5, 0x64, 0x77, 0xdd, 0xbe, 0x96, 0x04, 0x90, 0xff, 0x12, 0xaf, 0x01, 0xb8, 0x79, 0x68,
	0xa7, 0xe1, 0xf6, 0xfd, 0xda, 0x93, 0x05, 0xa4, 0x48, 0x10, 0xc1, 0x1f, 0x57, 0x8a, 0xa5, 0xab,
	0x7f, 0x0f, 0xc0, 0x31, 0xfc, 0xcf, 0x4b, 0x61, 0xa9, 0xd7, 0x4e, 0x14, 0x27, 0xe2, 0x50, 0xe2,
	0xe9, 0x64, 0x09, 0x02, 0x75, 0xf6, 0x31, 0x80, 0x35, 0xfc, 0x21, 0x7f, 0x59, 0x66, 0x8b, 0xb3,
	0x13, 0x2e, 0xca, 0x5c, 0x49, 0x0a, 0x75, 0xf9, 0x3c, 0x84, 0x0d, 0x14, 0x2c, 0x86, 0xbd, 0xb5,
	0x36, 0x4e, 0xae, 0x35, 0x29, 0x49, 0x6d, 0x6e, 0x58, 0x92, 0x53, 0xd3, 0x39, 0xe5, 0x48, 0x8f,
	0xd6, 0x18, 0x93, 0xd3, 0x72, 0xe1, 0xb6, 0x30, 0xd1, 0x9a, 0x4e, 0x87, 0x5c, 0xac, 0xbc, 0x59,
	0x8a, 0xfb, 0xb8, 0x26, 0x02, 0xe4, 0x59, 0xfa, 0x12, 0x9c, 0x08, 0x03, 0x66, 0x1c, 0x3b, 0xf0,
	0x1c, 0xcb, 0x42, 0x1e, 0x11, 0x5e, 0x52, 0x12, 0x8e, 0x71, 0xe4, 0xfa, 0x2f, 0x03, 0x38, 0x19,
	0x06, 0x9e, 0x74, 0x5d, 0xcb, 0x34, 0x46, 0xad, 0x9a, 0x38, 0x58, 0x56, 0x72, 0x10, 0x07, 0xc9,
	0x2d, 0xdc, 0x84, 0xe3, 0x61, 0xe0, 0xb2, 0xde, 0x43, 0xbe, 0xab, 0x1b, 0x88, 0xe8, 0x2f, 0x2a,
	0xe9, 0x8b, 0x18, 0xb9, 0xba, 0x07, 0xb7, 0xe3, 0x30, 0xa7, 0x43, 0x85, 0x1b, 0x6a, 0xc2, 0x8c,
	0x20, 0xd7, 0x7c, 0x91, 0x34, 0xc4, 0x19, 0xab, 0xef, 0x07, 0xec, 0x8a, 0x9f, 0x51, 0xbb, 0xe2,
	0x11, 0x88, 0x5c, 0xf9, 0x43, 0xdc, 0x8c, 0xb8, 0xfc, 0x9e, 0x2d, 0x28, 0x1a, 0x0d, 0x2f, 0x5a,
	0xee, 0x69, 0x14, 0x5a, 0x82, 0x5f, 0x03, 0xb8, 0x6b, 0xf8, 0x61, 0xbc, 0x1e, 0x16, 0x14, 0x24,
	0x52, 0xab, 0x61, 0xb1, 0x1a, 0x18, 0xb5, 0xfd, 0x2d, 0x80, 0xe3, 0xc3, 0xef, 0x24, 0x54, 0x91,
	0x8a, 0x54, 0x7a, 0x0d, 0x2d, 0x55, 0x44, 0xa3, 0xce, 0xbf, 0x04, 0x70, 0xe7, 0xf0, 0x4b, 0xb1,
	0xea, 0x3b, 0xa3, 0xa0, 0x94, 0x56, 0x7b, 0x0b, 0x95, 0xb0, 0xa8, 0xe7, 0x8f, 0x00, 0x7c, 0x70,
	0xf4, 0x15, 0xae, 0x66, 0x55, 0x32, 0x30, 0xa1, 0x62, 0x4f, 0x95, 0xc5, 0x50, 0x93, 0x9f, 0xe2,
	0xf1, 0x2a, 0x14, 0xf9, 0xbc, 0x4a, 0xe6, 0x25, 0x96, 0xf8, 0xe9, 0x0a, 0x48, 0xd4, 0xed, 0x51,
	0xf8, 0xbf, 0xa6, 0x69, 0x77, 0x53, 0x07, 0x6c, 0x72, 0x3f, 0x19, 0xc0, 0x1a, 0x9d, 0x77, 0x4d,
	0x72, 0x4f, 0x92, 0x3b, 0x73, 0xe8, 0x5d, 0x8c, 0x16, 0x87, 0xc8, 0xfb, 0xd8, 0xab, 0x00, 0xee,
	0x16, 0xe7, 0x1d, 0xd3, 0x3f, 0xa7, 0xa8, 0x9f, 0xc0, 0x92, 0xdb, 0x78, 0x1d, 0xc0, 0xa9, 0xd8,
	0xd0, 0x63, 0x3e, 0x5a, 0x8a, 0x3e, 0x92, 0x60, 0x72, 0x23, 0xaf, 0xd0, 0x31, 0x4e, 0xab, 0x86,
	0xd9, 0x68, 0x2a, 0xda, 0x88, 0xa3, 0xb2, 0xc6, 0xda, 0x0e, 0x36, 0x08, 0x99, 0xfc, 0x82, 0xaa,
	0x3c, 0x4f, 0xc9, 0xda, 0x45, 0x8d, 0x47, 0x66, 0x21, 0x13, 0x5f, 0x56, 0x4d, 0x05, 0x01, 0x24,
	0xd7, 0xbf, 0x03, 0xe0, 0x36, 0x3c, 0xd1, 0x98, 0xf4, 0x7c, 0x61, 0x69, 0x11, 0x51, 0xb4, 0xd0,
	0x65, 0x24, 0x5a, 0xe8, 0x3f, 0x02, 0x38, 0x11, 0x9d, 0x66, 0xcc, 0xf2, 0x59, 0x25, 0x21, 0x49,
	0xd9, 0x34, 0xab, 0x03, 0xd2, 0x05, 0xfc, 0x04, 0xe0, 0xa4, 0x30, 0xd5, 0xca, 0xe4, 0x7a, 0x1a,
	0x8a, 0x2c, 0xe1, 0x5c, 0x85, 0x44, 0xba, 0x86, 0xef, 0xf1, 0x76, 0x21, 0xa1, 0x5a, 0x97, 0x95,
	0xf4, 0xd2, 0x6b, 0xf5, 0x6c, 0x65, 0x3c, 0xea, 0xfe, 0x33, 0x00, 0xb7, 0x93, 0xb9, 0xc7, 0x8c,
	0xab, 0x65, 0x69, 0x62, 0x95, 0x9f, 0xa9, 0x02, 0x45, 0xed, 0xde, 0xc5, 0x3b, 0x9c, 0x58, 0x73,
	0x58, 0x54, 0xcb, 0xce, 0x94, 0xd6, 0xb0, 0x54, 0x11, 0x8d, 0xfa, 0xbe, 0x49, 0x6e, 0x13, 0x86,
	0x95, 0xcc, 0xdd, 0xa0, 0xe7, 0xce, 0x10, 0x16, 0xa3, 0x25, 0x81, 0xe4, 0x3d, 0xed, 0x4d, 0x00,
	0xf7, 0xc4, 0xc6, 0x22, 0xe7, 0xe2, 0x82, 0xb2, 0x8b, 0x44, 0x9e, 0xdc, 0xcc, 0x5b, 0x00, 0xee,
	0x8d, 0xcf, 0x46, 0xce, 0xcd, 0x45, 0x65, 0x37, 0xc9, 0x40, 0xb9, 0x9d, 0x37, 0xe8, 0xdc, 0x67,
	0x75, 0xc2, 0x99, 0x39, 0xaf, 0x6c, 0x26, 0x09, 0x97, 0x35, 0xfa, 0x76, 0x71, 0xe3, 0x92, 0x33,
	0x71, 0x56, 0xdd, 0x44, 0x94, 0x94, 0xb9, 0x13, 0x9b, 0x8c, 0x8e, 0x4c, 0xce, 0x43, 0x4b, 0x3d,
	0x47, 0x62, 0x30, 0xb9, 0x8d, 0xaf, 0xf0, 0x66, 0x5b, 0x28, 0x95, 0x45, 0x05, 0x03, 0x71, 0x4c,
	0xe1, 0x0a, 0xcf, 0xa0, 0xd1, 0x0a, 0xff, 0x15, 0xc0, 0xdd, 0xc2, 0xc0, 0xe3, 0xcc, 0xb7, 0x15,
	0xe5, 0xa4, 0xf5, 0x75, 0xbe, 0x5a, 0x28, 0x5d, 0xca, 0x6f, 0x00, 0x4e, 0x89, 0x83, 0xaf, 0x64,
	0x49, 0xa4, 0xe3, 0xc8, 0x62, 0x2e, 0x54, 0x4c, 0xa5, 0xab, 0xf9, 0x19, 0xef, 0x31, 0x12, 0xcb,
	0xbb, 0xa5, 0xa8, 0x2a, 0x2b, 0xee, 0x76, 0xa5, 0x4c, 0xba, 0x8e, 0x6f, 0x00, 0xdc, 0x41, 0x47,
	0x23, 0xb7, 0x04, 0xd5, 0x4c, 0x4e, 0x69, 0x0d, 0xcb, 0x55, 0xe1, 0xa8, 0xf1, 0x7b, 0x78, 0x83,
	0x94, 0xd0, 0x54, 0x9a, 0xaa, 0x19, 0x9c, 0xda, 0x52, 0xce, 0x55, 0x48, 0xa4, 0x2b, 0xb8, 0x0d,
	0xe0, 0x96, 0x16, 0xd2, 0x3b, 0xad, 0xf0, 0xd5, 0x59, 0xee, 0x57, 0x3e, 0xf8, 0x55, 0x9b, 0xc6,
	0xc5, 0x12, 0x9f, 0xd3, 0x65, 0x10, 0xd4, 0xd8, 0x1a, 0xdc, 0xba, 0xe2, 0x99, 0x01, 0x22, 0xc6,
	0x8a, 0x52, 0xf9, 0xe0, 0xcc, 0x31, 0x39, 0x49, 0x37, 0x1e, 0xad, 0xe8, 0xdb, 0xc0, 0xdc, 0x13,
	0x5b, 0x78, 0x8b, 0xa8, 0xa5, 0x01, 0xe5, 0x56, 0x6e, 0x03, 0x78, 0x40, 0xdc, 0x7d, 0x88, 0x8e,
	0xae, 0x96, 0x72, 0x94, 0xca, 0x95, 0x1b, 0x7b, 0x1f, 0xc0, 0x87, 0x62, 0x1b, 0x11, 0xd1, 0xd9,
	0xb3, 0xa5, 0x9c, 0xa5, 0x83, 0xe5, 0xd6, 0x6e, 0x01, 0xb8, 0x5f, 0xd8, 0x96, 0x88, 0xc6, 0xae,
	0x94, 0x32, 0x96, 0x86, 0xcd, 0xdc, 0x98, 0xee, 0x66, 0x1b, 0x15, 0xd1, 0xd1, 0x4a, 0x39, 0x47,
	0x71, 0xa2, 0xdc, 0xcc, 0x3b, 0x74, 0x63, 0x8a, 0x9b, 0x81, 0xe8, 0xe7, 0x52, 0xb9, 0xa4, 0x4a,
	0x84, 0xca, 0x2d, 0xfd, 0x82, 0x5b, 0x67, 0x42, 0xcd, 0x9d, 0x57, 0x34, 0x93, 0x8c, 0x2b, 0x3a,
	0x85, 0xf3, 0x52, 0x69, 0xa7, 0xfa, 0x1d, 0xc0, 0x03, 0xa3, 0x71, 0x3d, 0xd0, 0x4d, 0x4b, 0x5f,
	0xb5, 0xd0, 0x7f, 0x7f, 0x49, 0x7f, 0x01, 0xb8, 0x2f, 0xba, 0x9d, 0x12, 0x17, 0x74, 0xb9, 0x84,
	0x74, 0x66, 0x0f, 0xba, 0xb2, 0x3e, 0x70, 0xba, 0xbc, 0xbf, 0x01, 0xdc, 0x2f, 0x6c, 0xb0, 0xaa,
	0x6a, 0x19, 0x72, 0x2c, 0x59, 0xe0, 0xd5, 0x75, 0xa2, 0xd3, 0x15, 0xfe, 0x09, 0xe0, 0xde, 0xc8,
	0xc6, 0xab, 0xaa, 0x82, 0x97, 0x41, 0xc9, 0xea, 0x2e, 0xaf, 0x0b, 0x9b, 0xae, 0xed, 0x3e, 0x7e,
	0x34, 0x98, 0xd4, 0x57, 0xcb, 0x54, 0x84, 0xa4, 0xab, 0x5e, 0xac, 0x1a, 0x4b, 0x17, 0xf3, 0x07,
	0xbe, 0x21, 0x49, 0xe9, 0xcb, 0x4f, 0x97, 0xa9, 0x04, 0x69, 0x57, 0x7e, 0x66, 0x1d, 0xc8, 0x74,
	0x55, 0xd7, 0x20, 0xa4, 0x1b, 0x20, 0x3f, 0xff, 0xd6, 0x8d, 0x1c, 0xa6, 0x62, 0xbb, 0xa7, 0x8c,
	0x21, 0x12, 0x90, 0xd7, 0xe2, 0xac, 0xea, 0xf3, 0x3f, 0xe1, 0x13, 0xe5, 0x38, 0x86, 0x5c, 0x95,
	0xbe, 0x4e, 0xe2, 0x4a, 0x31, 0xff, 0xeb, 0x24, 0x51, 0x96, 0x87, 0x64, 0x1d, 0x02, 0xd8, 0x26,
	0xec, 0x48, 0xf2, 0x3f, 0xbe, 0x17, 0x55, 0x19, 0x42, 0xae, 0xb9, 0x06, 0xb7, 0xb0, 0x3d, 0x87,
	0x5f, 0x9b, 0x51, 0x95, 0x1b, 0x46, 0xcb, 0x95, 0x6c, 0x38, 0x16, 0xd9, 0x4d, 0xe4, 0x3f, 0xd3,
	0x12, 0xbb, 0x90, 0x18, 0x90, 0x79, 0x06, 0x6d, 0x33, 0x1e, 0x84, 0xf9, 0xcf, 0x3a, 0x31, 0x29,
	0x12, 0x5a, 0xf4, 0xac, 0x53, 0x12, 0x81, 0xd6, 0xcd, 0x27, 0xf8, 0x8d, 0x31, 0x9f, 0xce, 0x0d,
	0x25, 0x70, 0x42, 0x32, 0xcf, 0x97, 0x07, 0x51, 0xa3, 0xe4, 0x55, 0x52, 0xa4, 0x02, 0xd4, 0x04,
	0x92, 0xf2, 0xff, 0x74, 0x05, 0x24, 0xfe, 0x00, 0xd9, 0x58, 0x64, 0xb4, 0xa8, 0x64, 0x56, 0x14,
	0x40, 0x7c, 0x36, 0x4a, 0x73, 0xa8, 0xcb, 0x5b, 0x00, 0x3e, 0x40, 0xc6, 0x45, 0xfe, 0x93, 0x97,
	0x02, 0x98, 0xaf, 0xb2, 0xe9, 0x32, 0x08, 0x6a, 0xeb, 0x03, 0x00, 0xb7, 0x72, 0x2d, 0x3f, 0xff,
	0x41, 0x1c, 0x21, 0x8b, 0x84, 0x92, 0x9c, 0x2b, 0x49, 0xe1, 0x27, 0xcd, 0x2c, 0xb2, 0x90, 0xf2,
	0xa4, 0x61, 0xc1, 0x99, 0x93, 0x26, 0xfc, 0x6a, 0xb9, 0x49, 0x13, 0x63, 0x64, 0x4e, 0x9a, 0x30,
	0xa2, 0xe4, 0xa4, 0x89, 0x43, 0x32, 0x27, 0x4d, 0x18, 0x52, 0x6a, 0xd2, 0x88, 0x88, 0xcc, 0x49,
	0x83, 0x03, 0x14, 0x27, 0x0d, 0x17, 0x9d, 0x39, 0x69, 0xf0, 0x75, 0x50, 0x9f, 0x34, 0x51, 0x80,
	0x5c, 0xef, 0x6d, 0xfa, 0x54, 0xa7, 0x6d, 0xf6, 0xfa, 0x96, 0x1e, 0xa0, 0x4e, 0xdb, 0x58, 0x43,
	0x9d, 0xbe, 0x65, 0xda, 0xdd, 0xf6, 0xe8, 0x28, 0x78, 0xee, 0x1b, 0xc4, 0xf0, 0xe4, 0xb8, 0x96,
	0x81, 0x93, 0xfb, 0xb9, 0x8f, 0xef, 0xee, 0xd2, 0xdd, 0xb4, 0x8a, 0xb9, 0x91, 0xc2, 0x8a, 0x3e,
	0x3b, 0xce, 0xc7, 0xe4, 0xcf, 0x2f, 0x8d, 0x9e, 0x1d, 0xaf, 0x20, 0x7d, 0x80, 0xda, 0x86, 0xe3,
	0xa2, 0x79, 0xc7, 0x0f, 0xf2, 0xbf, 0x53, 0x61, 0xc7, 0xea, 0xb5, 0x04, 0x0c, 0x31, 0x3f, 0x5b,
	0x9c, 0xc6, 0x48, 0x9c, 0xdb, 0x2f, 0x00, 0x9c, 0x6c, 0x20, 0x41, 0x65, 0x16, 0x05, 0xba, 0x69,
	0x6d, 0x54, 0xcb, 0x77, 0xf0, 0x3b, 0x2b, 0xf6, 0xe1, 0xa8, 0xd5, 0x2e, 0x94, 0x35, 0xcb, 0xf7,
	0xdc, 0xaa, 0xbc, 0x7e, 0x0e, 0xe0, 0x44, 0xe4, 0xe7, 0x6d, 0x3a, 0x1d, 0xf2, 0xeb, 0x6e, 0x48,
	0xc3, 0x77, 0xf1, 0x1b, 0x1c, 0xf6, 0xe1, 0x0c, 0xe5, 0xe6, 0x3e, 0x20, 0x96, 0xea, 0x98, 0xb1,
	0xaa, 0xf6, 0x7d, 0x0f, 0xc0, 0x83, 0x69, 0x5a, 0xd3, 0x37, 0x86, 0x79, 0x68, 0xeb, 0x3d, 0xb4,
	0x91, 0x57, 0xf0, 0x03, 0x7e, 0x6a, 0x97, 0xbc, 0x82, 0xd3, 0x3d, 0xbd, 0xbb, 0xa1, 0xed, 0x7f,
	0x07, 0xe0, 0xbe, 0x48, 0xa6, 0x53, 0x29, 0x92, 0xef, 0x1b, 0xd7, 0xfc, 0xf4, 0xf1, 0x4b, 0x4f,
	0x74, 0xcd, 0x60, 0xf8, 0x4d, 0xc3, 0xe9, 0xd5, 0x19, 0xf3, 0x51, 0xdd, 0xac, 0xeb, 0xae, 0x29,
	0xfd, 0x0f, 0x6f, 0xab, 0xff, 0x1f, 0x1d, 0xf9, 0x3c, 0xf2, 0x6f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x44, 0x2c, 0x23, 0x26, 0x9d, 0x37, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DatahubServiceClient is the client API for DatahubService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DatahubServiceClient interface {
	// Events --------------------------------------------------
	CreateEvents(ctx context.Context, in *events.CreateEventsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListEvents(ctx context.Context, in *events.ListEventsRequest, opts ...grpc.CallOption) (*events.ListEventsResponse, error)
	// GPU --------------------------------------------------
	CreateGpuPredictions(ctx context.Context, in *gpu.CreateGpuPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListGpus(ctx context.Context, in *gpu.ListGpusRequest, opts ...grpc.CallOption) (*gpu.ListGpusResponse, error)
	ListGpuMetrics(ctx context.Context, in *gpu.ListGpuMetricsRequest, opts ...grpc.CallOption) (*gpu.ListGpuMetricsResponse, error)
	ListGpuPredictions(ctx context.Context, in *gpu.ListGpuPredictionsRequest, opts ...grpc.CallOption) (*gpu.ListGpuPredictionsResponse, error)
	// Licenses --------------------------------------------------
	GetLicense(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*licenses.GetLicenseResponse, error)
	// Metrics --------------------------------------------------
	CreatePodMetrics(ctx context.Context, in *metrics.CreatePodMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateControllerMetrics(ctx context.Context, in *metrics.CreateControllerMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateApplicationMetrics(ctx context.Context, in *metrics.CreateApplicationMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNamespaceMetrics(ctx context.Context, in *metrics.CreateNamespaceMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNodeMetrics(ctx context.Context, in *metrics.CreateNodeMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateClusterMetrics(ctx context.Context, in *metrics.CreateClusterMetricsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListPodMetrics(ctx context.Context, in *metrics.ListPodMetricsRequest, opts ...grpc.CallOption) (*metrics.ListPodMetricsResponse, error)
	ListControllerMetrics(ctx context.Context, in *metrics.ListControllerMetricsRequest, opts ...grpc.CallOption) (*metrics.ListControllerMetricsResponse, error)
	ListApplicationMetrics(ctx context.Context, in *metrics.ListApplicationMetricsRequest, opts ...grpc.CallOption) (*metrics.ListApplicationMetricsResponse, error)
	ListNamespaceMetrics(ctx context.Context, in *metrics.ListNamespaceMetricsRequest, opts ...grpc.CallOption) (*metrics.ListNamespaceMetricsResponse, error)
	ListNodeMetrics(ctx context.Context, in *metrics.ListNodeMetricsRequest, opts ...grpc.CallOption) (*metrics.ListNodeMetricsResponse, error)
	ListClusterMetrics(ctx context.Context, in *metrics.ListClusterMetricsRequest, opts ...grpc.CallOption) (*metrics.ListClusterMetricsResponse, error)
	// Ping --------------------------------------------------
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*status.Status, error)
	// Plannings --------------------------------------------------
	CreatePodPlannings(ctx context.Context, in *plannings.CreatePodPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateControllerPlannings(ctx context.Context, in *plannings.CreateControllerPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateApplicationPlannings(ctx context.Context, in *plannings.CreateApplicationPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNamespacePlannings(ctx context.Context, in *plannings.CreateNamespacePlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNodePlannings(ctx context.Context, in *plannings.CreateNodePlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateClusterPlannings(ctx context.Context, in *plannings.CreateClusterPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListPodPlannings(ctx context.Context, in *plannings.ListPodPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListPodPlanningsResponse, error)
	ListControllerPlannings(ctx context.Context, in *plannings.ListControllerPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListControllerPlanningsResponse, error)
	ListApplicationPlannings(ctx context.Context, in *plannings.ListApplicationPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListApplicationPlanningsResponse, error)
	ListNamespacePlannings(ctx context.Context, in *plannings.ListNamespacePlanningsRequest, opts ...grpc.CallOption) (*plannings.ListNamespacePlanningsResponse, error)
	ListNodePlannings(ctx context.Context, in *plannings.ListNodePlanningsRequest, opts ...grpc.CallOption) (*plannings.ListNodePlanningsResponse, error)
	ListClusterPlannings(ctx context.Context, in *plannings.ListClusterPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListClusterPlanningsResponse, error)
	// Predictions --------------------------------------------------
	CreatePodPredictions(ctx context.Context, in *predictions.CreatePodPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateControllerPredictions(ctx context.Context, in *predictions.CreateControllerPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateApplicationPredictions(ctx context.Context, in *predictions.CreateApplicationPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNamespacePredictions(ctx context.Context, in *predictions.CreateNamespacePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNodePredictions(ctx context.Context, in *predictions.CreateNodePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateClusterPredictions(ctx context.Context, in *predictions.CreateClusterPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListPodPredictions(ctx context.Context, in *predictions.ListPodPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListPodPredictionsResponse, error)
	ListControllerPredictions(ctx context.Context, in *predictions.ListControllerPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListControllerPredictionsResponse, error)
	ListApplicationPredictions(ctx context.Context, in *predictions.ListApplicationPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListApplicationPredictionsResponse, error)
	ListNamespacePredictions(ctx context.Context, in *predictions.ListNamespacePredictionsRequest, opts ...grpc.CallOption) (*predictions.ListNamespacePredictionsResponse, error)
	ListNodePredictions(ctx context.Context, in *predictions.ListNodePredictionsRequest, opts ...grpc.CallOption) (*predictions.ListNodePredictionsResponse, error)
	ListClusterPredictions(ctx context.Context, in *predictions.ListClusterPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListClusterPredictionsResponse, error)
	// Rawdata --------------------------------------------------
	ReadRawdata(ctx context.Context, in *rawdata.ReadRawdataRequest, opts ...grpc.CallOption) (*rawdata.ReadRawdataResponse, error)
	WriteRawdata(ctx context.Context, in *rawdata.WriteRawdataRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Recommendations --------------------------------------------------
	CreatePodRecommendations(ctx context.Context, in *recommendations.CreatePodRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateControllerRecommendations(ctx context.Context, in *recommendations.CreateControllerRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateApplicationRecommendations(ctx context.Context, in *recommendations.CreateApplicationRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNamespaceRecommendations(ctx context.Context, in *recommendations.CreateNamespaceRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNodeRecommendations(ctx context.Context, in *recommendations.CreateNodeRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateClusterRecommendations(ctx context.Context, in *recommendations.CreateClusterRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	ListPodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error)
	ListAvailablePodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error)
	ListControllerRecommendations(ctx context.Context, in *recommendations.ListControllerRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListControllerRecommendationsResponse, error)
	ListApplicationRecommendations(ctx context.Context, in *recommendations.ListApplicationRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListApplicationRecommendationsResponse, error)
	ListNamespaceRecommendations(ctx context.Context, in *recommendations.ListNamespaceRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListNamespaceRecommendationsResponse, error)
	ListNodeRecommendations(ctx context.Context, in *recommendations.ListNodeRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListNodeRecommendationsResponse, error)
	ListClusterRecommendations(ctx context.Context, in *recommendations.ListClusterRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListClusterRecommendationsResponse, error)
	// Resources --------------------------------------------------
	// Used to add pods that need to be predicted
	CreatePods(ctx context.Context, in *resources.CreatePodsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateControllers(ctx context.Context, in *resources.CreateControllersRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateApplications(ctx context.Context, in *resources.CreateApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateNamespaces(ctx context.Context, in *resources.CreateNamespacesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to add nodes that need to be predicted
	CreateNodes(ctx context.Context, in *resources.CreateNodesRequest, opts ...grpc.CallOption) (*status.Status, error)
	CreateClusters(ctx context.Context, in *resources.CreateClustersRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to list pods need to be predicted
	ListPods(ctx context.Context, in *resources.ListPodsRequest, opts ...grpc.CallOption) (*resources.ListPodsResponse, error)
	ListControllers(ctx context.Context, in *resources.ListControllersRequest, opts ...grpc.CallOption) (*resources.ListControllersResponse, error)
	// Application
	ListApplications(ctx context.Context, in *resources.ListApplicationsRequest, opts ...grpc.CallOption) (*resources.ListApplicationsResponse, error)
	// Namespace
	ListNamespaces(ctx context.Context, in *resources.ListNamespacesRequest, opts ...grpc.CallOption) (*resources.ListNamespacesResponse, error)
	// Used to list nodes' information
	ListNodes(ctx context.Context, in *resources.ListNodesRequest, opts ...grpc.CallOption) (*resources.ListNodesResponse, error)
	// Cluster
	ListClusters(ctx context.Context, in *resources.ListClustersRequest, opts ...grpc.CallOption) (*resources.ListClustersResponse, error)
	// Used to delete info of pods
	DeletePods(ctx context.Context, in *resources.DeletePodsRequest, opts ...grpc.CallOption) (*status.Status, error)
	DeleteControllers(ctx context.Context, in *resources.DeleteControllersRequest, opts ...grpc.CallOption) (*status.Status, error)
	DeleteApplications(ctx context.Context, in *resources.DeleteApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error)
	DeleteNamespaces(ctx context.Context, in *resources.DeleteNamespacesRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to stop generating predictions for the nodes
	DeleteNodes(ctx context.Context, in *resources.DeleteNodesRequest, opts ...grpc.CallOption) (*status.Status, error)
	DeleteClusters(ctx context.Context, in *resources.DeleteClustersRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Scores --------------------------------------------------
	CreateSimulatedSchedulingScores(ctx context.Context, in *scores.CreateSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*status.Status, error)
	// Used to list system scores
	ListSimulatedSchedulingScores(ctx context.Context, in *scores.ListSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*scores.ListSimulatedSchedulingScoresResponse, error)
	// weave scope --------------------------------------------------
	ListWeaveScopeHosts(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeHostDetails(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopePods(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopePodDetails(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainers(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByHostname(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByImage(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeContainerDetails(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error)
}

type datahubServiceClient struct {
	cc *grpc.ClientConn
}

func NewDatahubServiceClient(cc *grpc.ClientConn) DatahubServiceClient {
	return &datahubServiceClient{cc}
}

func (c *datahubServiceClient) CreateEvents(ctx context.Context, in *events.CreateEventsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListEvents(ctx context.Context, in *events.ListEventsRequest, opts ...grpc.CallOption) (*events.ListEventsResponse, error) {
	out := new(events.ListEventsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListEvents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateGpuPredictions(ctx context.Context, in *gpu.CreateGpuPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateGpuPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListGpus(ctx context.Context, in *gpu.ListGpusRequest, opts ...grpc.CallOption) (*gpu.ListGpusResponse, error) {
	out := new(gpu.ListGpusResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListGpuMetrics(ctx context.Context, in *gpu.ListGpuMetricsRequest, opts ...grpc.CallOption) (*gpu.ListGpuMetricsResponse, error) {
	out := new(gpu.ListGpuMetricsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpuMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListGpuPredictions(ctx context.Context, in *gpu.ListGpuPredictionsRequest, opts ...grpc.CallOption) (*gpu.ListGpuPredictionsResponse, error) {
	out := new(gpu.ListGpuPredictionsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpuPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetLicense(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*licenses.GetLicenseResponse, error) {
	out := new(licenses.GetLicenseResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/GetLicense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodMetrics(ctx context.Context, in *metrics.CreatePodMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllerMetrics(ctx context.Context, in *metrics.CreateControllerMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateApplicationMetrics(ctx context.Context, in *metrics.CreateApplicationMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateApplicationMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNamespaceMetrics(ctx context.Context, in *metrics.CreateNamespaceMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNamespaceMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodeMetrics(ctx context.Context, in *metrics.CreateNodeMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodeMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateClusterMetrics(ctx context.Context, in *metrics.CreateClusterMetricsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateClusterMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodMetrics(ctx context.Context, in *metrics.ListPodMetricsRequest, opts ...grpc.CallOption) (*metrics.ListPodMetricsResponse, error) {
	out := new(metrics.ListPodMetricsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllerMetrics(ctx context.Context, in *metrics.ListControllerMetricsRequest, opts ...grpc.CallOption) (*metrics.ListControllerMetricsResponse, error) {
	out := new(metrics.ListControllerMetricsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListApplicationMetrics(ctx context.Context, in *metrics.ListApplicationMetricsRequest, opts ...grpc.CallOption) (*metrics.ListApplicationMetricsResponse, error) {
	out := new(metrics.ListApplicationMetricsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListApplicationMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNamespaceMetrics(ctx context.Context, in *metrics.ListNamespaceMetricsRequest, opts ...grpc.CallOption) (*metrics.ListNamespaceMetricsResponse, error) {
	out := new(metrics.ListNamespaceMetricsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNamespaceMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodeMetrics(ctx context.Context, in *metrics.ListNodeMetricsRequest, opts ...grpc.CallOption) (*metrics.ListNodeMetricsResponse, error) {
	out := new(metrics.ListNodeMetricsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodeMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListClusterMetrics(ctx context.Context, in *metrics.ListClusterMetricsRequest, opts ...grpc.CallOption) (*metrics.ListClusterMetricsResponse, error) {
	out := new(metrics.ListClusterMetricsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListClusterMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodPlannings(ctx context.Context, in *plannings.CreatePodPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllerPlannings(ctx context.Context, in *plannings.CreateControllerPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateApplicationPlannings(ctx context.Context, in *plannings.CreateApplicationPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateApplicationPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNamespacePlannings(ctx context.Context, in *plannings.CreateNamespacePlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNamespacePlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodePlannings(ctx context.Context, in *plannings.CreateNodePlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodePlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateClusterPlannings(ctx context.Context, in *plannings.CreateClusterPlanningsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateClusterPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodPlannings(ctx context.Context, in *plannings.ListPodPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListPodPlanningsResponse, error) {
	out := new(plannings.ListPodPlanningsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllerPlannings(ctx context.Context, in *plannings.ListControllerPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListControllerPlanningsResponse, error) {
	out := new(plannings.ListControllerPlanningsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListApplicationPlannings(ctx context.Context, in *plannings.ListApplicationPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListApplicationPlanningsResponse, error) {
	out := new(plannings.ListApplicationPlanningsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListApplicationPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNamespacePlannings(ctx context.Context, in *plannings.ListNamespacePlanningsRequest, opts ...grpc.CallOption) (*plannings.ListNamespacePlanningsResponse, error) {
	out := new(plannings.ListNamespacePlanningsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNamespacePlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodePlannings(ctx context.Context, in *plannings.ListNodePlanningsRequest, opts ...grpc.CallOption) (*plannings.ListNodePlanningsResponse, error) {
	out := new(plannings.ListNodePlanningsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodePlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListClusterPlannings(ctx context.Context, in *plannings.ListClusterPlanningsRequest, opts ...grpc.CallOption) (*plannings.ListClusterPlanningsResponse, error) {
	out := new(plannings.ListClusterPlanningsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListClusterPlannings", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodPredictions(ctx context.Context, in *predictions.CreatePodPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllerPredictions(ctx context.Context, in *predictions.CreateControllerPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateApplicationPredictions(ctx context.Context, in *predictions.CreateApplicationPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateApplicationPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNamespacePredictions(ctx context.Context, in *predictions.CreateNamespacePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNamespacePredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodePredictions(ctx context.Context, in *predictions.CreateNodePredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodePredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateClusterPredictions(ctx context.Context, in *predictions.CreateClusterPredictionsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateClusterPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodPredictions(ctx context.Context, in *predictions.ListPodPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListPodPredictionsResponse, error) {
	out := new(predictions.ListPodPredictionsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllerPredictions(ctx context.Context, in *predictions.ListControllerPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListControllerPredictionsResponse, error) {
	out := new(predictions.ListControllerPredictionsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListApplicationPredictions(ctx context.Context, in *predictions.ListApplicationPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListApplicationPredictionsResponse, error) {
	out := new(predictions.ListApplicationPredictionsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListApplicationPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNamespacePredictions(ctx context.Context, in *predictions.ListNamespacePredictionsRequest, opts ...grpc.CallOption) (*predictions.ListNamespacePredictionsResponse, error) {
	out := new(predictions.ListNamespacePredictionsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNamespacePredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodePredictions(ctx context.Context, in *predictions.ListNodePredictionsRequest, opts ...grpc.CallOption) (*predictions.ListNodePredictionsResponse, error) {
	out := new(predictions.ListNodePredictionsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodePredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListClusterPredictions(ctx context.Context, in *predictions.ListClusterPredictionsRequest, opts ...grpc.CallOption) (*predictions.ListClusterPredictionsResponse, error) {
	out := new(predictions.ListClusterPredictionsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListClusterPredictions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ReadRawdata(ctx context.Context, in *rawdata.ReadRawdataRequest, opts ...grpc.CallOption) (*rawdata.ReadRawdataResponse, error) {
	out := new(rawdata.ReadRawdataResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ReadRawdata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) WriteRawdata(ctx context.Context, in *rawdata.WriteRawdataRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/WriteRawdata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePodRecommendations(ctx context.Context, in *recommendations.CreatePodRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllerRecommendations(ctx context.Context, in *recommendations.CreateControllerRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateApplicationRecommendations(ctx context.Context, in *recommendations.CreateApplicationRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateApplicationRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNamespaceRecommendations(ctx context.Context, in *recommendations.CreateNamespaceRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNamespaceRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodeRecommendations(ctx context.Context, in *recommendations.CreateNodeRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodeRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateClusterRecommendations(ctx context.Context, in *recommendations.CreateClusterRecommendationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateClusterRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error) {
	out := new(recommendations.ListPodRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListAvailablePodRecommendations(ctx context.Context, in *recommendations.ListPodRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListPodRecommendationsResponse, error) {
	out := new(recommendations.ListPodRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListAvailablePodRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllerRecommendations(ctx context.Context, in *recommendations.ListControllerRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListControllerRecommendationsResponse, error) {
	out := new(recommendations.ListControllerRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListApplicationRecommendations(ctx context.Context, in *recommendations.ListApplicationRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListApplicationRecommendationsResponse, error) {
	out := new(recommendations.ListApplicationRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListApplicationRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNamespaceRecommendations(ctx context.Context, in *recommendations.ListNamespaceRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListNamespaceRecommendationsResponse, error) {
	out := new(recommendations.ListNamespaceRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNamespaceRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodeRecommendations(ctx context.Context, in *recommendations.ListNodeRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListNodeRecommendationsResponse, error) {
	out := new(recommendations.ListNodeRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodeRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListClusterRecommendations(ctx context.Context, in *recommendations.ListClusterRecommendationsRequest, opts ...grpc.CallOption) (*recommendations.ListClusterRecommendationsResponse, error) {
	out := new(recommendations.ListClusterRecommendationsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListClusterRecommendations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreatePods(ctx context.Context, in *resources.CreatePodsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateControllers(ctx context.Context, in *resources.CreateControllersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateApplications(ctx context.Context, in *resources.CreateApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNamespaces(ctx context.Context, in *resources.CreateNamespacesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateNodes(ctx context.Context, in *resources.CreateNodesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateClusters(ctx context.Context, in *resources.CreateClustersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListPods(ctx context.Context, in *resources.ListPodsRequest, opts ...grpc.CallOption) (*resources.ListPodsResponse, error) {
	out := new(resources.ListPodsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListControllers(ctx context.Context, in *resources.ListControllersRequest, opts ...grpc.CallOption) (*resources.ListControllersResponse, error) {
	out := new(resources.ListControllersResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListApplications(ctx context.Context, in *resources.ListApplicationsRequest, opts ...grpc.CallOption) (*resources.ListApplicationsResponse, error) {
	out := new(resources.ListApplicationsResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNamespaces(ctx context.Context, in *resources.ListNamespacesRequest, opts ...grpc.CallOption) (*resources.ListNamespacesResponse, error) {
	out := new(resources.ListNamespacesResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListNodes(ctx context.Context, in *resources.ListNodesRequest, opts ...grpc.CallOption) (*resources.ListNodesResponse, error) {
	out := new(resources.ListNodesResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListClusters(ctx context.Context, in *resources.ListClustersRequest, opts ...grpc.CallOption) (*resources.ListClustersResponse, error) {
	out := new(resources.ListClustersResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeletePods(ctx context.Context, in *resources.DeletePodsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/DeletePods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteControllers(ctx context.Context, in *resources.DeleteControllersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteControllers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteApplications(ctx context.Context, in *resources.DeleteApplicationsRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteNamespaces(ctx context.Context, in *resources.DeleteNamespacesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteNodes(ctx context.Context, in *resources.DeleteNodesRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) DeleteClusters(ctx context.Context, in *resources.DeleteClustersRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteClusters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) CreateSimulatedSchedulingScores(ctx context.Context, in *scores.CreateSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*status.Status, error) {
	out := new(status.Status)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateSimulatedSchedulingScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListSimulatedSchedulingScores(ctx context.Context, in *scores.ListSimulatedSchedulingScoresRequest, opts ...grpc.CallOption) (*scores.ListSimulatedSchedulingScoresResponse, error) {
	out := new(scores.ListSimulatedSchedulingScoresResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListSimulatedSchedulingScores", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeHosts(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeHosts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetWeaveScopeHostDetails(ctx context.Context, in *weavescope.ListWeaveScopeHostsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopeHostDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopePods(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopePods", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetWeaveScopePodDetails(ctx context.Context, in *weavescope.ListWeaveScopePodsRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopePodDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeContainers(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeContainersByHostname(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainersByHostname", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) ListWeaveScopeContainersByImage(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainersByImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datahubServiceClient) GetWeaveScopeContainerDetails(ctx context.Context, in *weavescope.ListWeaveScopeContainersRequest, opts ...grpc.CallOption) (*weavescope.WeaveScopeResponse, error) {
	out := new(weavescope.WeaveScopeResponse)
	err := c.cc.Invoke(ctx, "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopeContainerDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DatahubServiceServer is the server API for DatahubService service.
type DatahubServiceServer interface {
	// Events --------------------------------------------------
	CreateEvents(context.Context, *events.CreateEventsRequest) (*status.Status, error)
	ListEvents(context.Context, *events.ListEventsRequest) (*events.ListEventsResponse, error)
	// GPU --------------------------------------------------
	CreateGpuPredictions(context.Context, *gpu.CreateGpuPredictionsRequest) (*status.Status, error)
	ListGpus(context.Context, *gpu.ListGpusRequest) (*gpu.ListGpusResponse, error)
	ListGpuMetrics(context.Context, *gpu.ListGpuMetricsRequest) (*gpu.ListGpuMetricsResponse, error)
	ListGpuPredictions(context.Context, *gpu.ListGpuPredictionsRequest) (*gpu.ListGpuPredictionsResponse, error)
	// Licenses --------------------------------------------------
	GetLicense(context.Context, *empty.Empty) (*licenses.GetLicenseResponse, error)
	// Metrics --------------------------------------------------
	CreatePodMetrics(context.Context, *metrics.CreatePodMetricsRequest) (*status.Status, error)
	CreateControllerMetrics(context.Context, *metrics.CreateControllerMetricsRequest) (*status.Status, error)
	CreateApplicationMetrics(context.Context, *metrics.CreateApplicationMetricsRequest) (*status.Status, error)
	CreateNamespaceMetrics(context.Context, *metrics.CreateNamespaceMetricsRequest) (*status.Status, error)
	CreateNodeMetrics(context.Context, *metrics.CreateNodeMetricsRequest) (*status.Status, error)
	CreateClusterMetrics(context.Context, *metrics.CreateClusterMetricsRequest) (*status.Status, error)
	ListPodMetrics(context.Context, *metrics.ListPodMetricsRequest) (*metrics.ListPodMetricsResponse, error)
	ListControllerMetrics(context.Context, *metrics.ListControllerMetricsRequest) (*metrics.ListControllerMetricsResponse, error)
	ListApplicationMetrics(context.Context, *metrics.ListApplicationMetricsRequest) (*metrics.ListApplicationMetricsResponse, error)
	ListNamespaceMetrics(context.Context, *metrics.ListNamespaceMetricsRequest) (*metrics.ListNamespaceMetricsResponse, error)
	ListNodeMetrics(context.Context, *metrics.ListNodeMetricsRequest) (*metrics.ListNodeMetricsResponse, error)
	ListClusterMetrics(context.Context, *metrics.ListClusterMetricsRequest) (*metrics.ListClusterMetricsResponse, error)
	// Ping --------------------------------------------------
	Ping(context.Context, *empty.Empty) (*status.Status, error)
	// Plannings --------------------------------------------------
	CreatePodPlannings(context.Context, *plannings.CreatePodPlanningsRequest) (*status.Status, error)
	CreateControllerPlannings(context.Context, *plannings.CreateControllerPlanningsRequest) (*status.Status, error)
	CreateApplicationPlannings(context.Context, *plannings.CreateApplicationPlanningsRequest) (*status.Status, error)
	CreateNamespacePlannings(context.Context, *plannings.CreateNamespacePlanningsRequest) (*status.Status, error)
	CreateNodePlannings(context.Context, *plannings.CreateNodePlanningsRequest) (*status.Status, error)
	CreateClusterPlannings(context.Context, *plannings.CreateClusterPlanningsRequest) (*status.Status, error)
	ListPodPlannings(context.Context, *plannings.ListPodPlanningsRequest) (*plannings.ListPodPlanningsResponse, error)
	ListControllerPlannings(context.Context, *plannings.ListControllerPlanningsRequest) (*plannings.ListControllerPlanningsResponse, error)
	ListApplicationPlannings(context.Context, *plannings.ListApplicationPlanningsRequest) (*plannings.ListApplicationPlanningsResponse, error)
	ListNamespacePlannings(context.Context, *plannings.ListNamespacePlanningsRequest) (*plannings.ListNamespacePlanningsResponse, error)
	ListNodePlannings(context.Context, *plannings.ListNodePlanningsRequest) (*plannings.ListNodePlanningsResponse, error)
	ListClusterPlannings(context.Context, *plannings.ListClusterPlanningsRequest) (*plannings.ListClusterPlanningsResponse, error)
	// Predictions --------------------------------------------------
	CreatePodPredictions(context.Context, *predictions.CreatePodPredictionsRequest) (*status.Status, error)
	CreateControllerPredictions(context.Context, *predictions.CreateControllerPredictionsRequest) (*status.Status, error)
	CreateApplicationPredictions(context.Context, *predictions.CreateApplicationPredictionsRequest) (*status.Status, error)
	CreateNamespacePredictions(context.Context, *predictions.CreateNamespacePredictionsRequest) (*status.Status, error)
	CreateNodePredictions(context.Context, *predictions.CreateNodePredictionsRequest) (*status.Status, error)
	CreateClusterPredictions(context.Context, *predictions.CreateClusterPredictionsRequest) (*status.Status, error)
	ListPodPredictions(context.Context, *predictions.ListPodPredictionsRequest) (*predictions.ListPodPredictionsResponse, error)
	ListControllerPredictions(context.Context, *predictions.ListControllerPredictionsRequest) (*predictions.ListControllerPredictionsResponse, error)
	ListApplicationPredictions(context.Context, *predictions.ListApplicationPredictionsRequest) (*predictions.ListApplicationPredictionsResponse, error)
	ListNamespacePredictions(context.Context, *predictions.ListNamespacePredictionsRequest) (*predictions.ListNamespacePredictionsResponse, error)
	ListNodePredictions(context.Context, *predictions.ListNodePredictionsRequest) (*predictions.ListNodePredictionsResponse, error)
	ListClusterPredictions(context.Context, *predictions.ListClusterPredictionsRequest) (*predictions.ListClusterPredictionsResponse, error)
	// Rawdata --------------------------------------------------
	ReadRawdata(context.Context, *rawdata.ReadRawdataRequest) (*rawdata.ReadRawdataResponse, error)
	WriteRawdata(context.Context, *rawdata.WriteRawdataRequest) (*status.Status, error)
	// Recommendations --------------------------------------------------
	CreatePodRecommendations(context.Context, *recommendations.CreatePodRecommendationsRequest) (*status.Status, error)
	CreateControllerRecommendations(context.Context, *recommendations.CreateControllerRecommendationsRequest) (*status.Status, error)
	CreateApplicationRecommendations(context.Context, *recommendations.CreateApplicationRecommendationsRequest) (*status.Status, error)
	CreateNamespaceRecommendations(context.Context, *recommendations.CreateNamespaceRecommendationsRequest) (*status.Status, error)
	CreateNodeRecommendations(context.Context, *recommendations.CreateNodeRecommendationsRequest) (*status.Status, error)
	CreateClusterRecommendations(context.Context, *recommendations.CreateClusterRecommendationsRequest) (*status.Status, error)
	ListPodRecommendations(context.Context, *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error)
	ListAvailablePodRecommendations(context.Context, *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error)
	ListControllerRecommendations(context.Context, *recommendations.ListControllerRecommendationsRequest) (*recommendations.ListControllerRecommendationsResponse, error)
	ListApplicationRecommendations(context.Context, *recommendations.ListApplicationRecommendationsRequest) (*recommendations.ListApplicationRecommendationsResponse, error)
	ListNamespaceRecommendations(context.Context, *recommendations.ListNamespaceRecommendationsRequest) (*recommendations.ListNamespaceRecommendationsResponse, error)
	ListNodeRecommendations(context.Context, *recommendations.ListNodeRecommendationsRequest) (*recommendations.ListNodeRecommendationsResponse, error)
	ListClusterRecommendations(context.Context, *recommendations.ListClusterRecommendationsRequest) (*recommendations.ListClusterRecommendationsResponse, error)
	// Resources --------------------------------------------------
	// Used to add pods that need to be predicted
	CreatePods(context.Context, *resources.CreatePodsRequest) (*status.Status, error)
	CreateControllers(context.Context, *resources.CreateControllersRequest) (*status.Status, error)
	CreateApplications(context.Context, *resources.CreateApplicationsRequest) (*status.Status, error)
	CreateNamespaces(context.Context, *resources.CreateNamespacesRequest) (*status.Status, error)
	// Used to add nodes that need to be predicted
	CreateNodes(context.Context, *resources.CreateNodesRequest) (*status.Status, error)
	CreateClusters(context.Context, *resources.CreateClustersRequest) (*status.Status, error)
	// Used to list pods need to be predicted
	ListPods(context.Context, *resources.ListPodsRequest) (*resources.ListPodsResponse, error)
	ListControllers(context.Context, *resources.ListControllersRequest) (*resources.ListControllersResponse, error)
	// Application
	ListApplications(context.Context, *resources.ListApplicationsRequest) (*resources.ListApplicationsResponse, error)
	// Namespace
	ListNamespaces(context.Context, *resources.ListNamespacesRequest) (*resources.ListNamespacesResponse, error)
	// Used to list nodes' information
	ListNodes(context.Context, *resources.ListNodesRequest) (*resources.ListNodesResponse, error)
	// Cluster
	ListClusters(context.Context, *resources.ListClustersRequest) (*resources.ListClustersResponse, error)
	// Used to delete info of pods
	DeletePods(context.Context, *resources.DeletePodsRequest) (*status.Status, error)
	DeleteControllers(context.Context, *resources.DeleteControllersRequest) (*status.Status, error)
	DeleteApplications(context.Context, *resources.DeleteApplicationsRequest) (*status.Status, error)
	DeleteNamespaces(context.Context, *resources.DeleteNamespacesRequest) (*status.Status, error)
	// Used to stop generating predictions for the nodes
	DeleteNodes(context.Context, *resources.DeleteNodesRequest) (*status.Status, error)
	DeleteClusters(context.Context, *resources.DeleteClustersRequest) (*status.Status, error)
	// Scores --------------------------------------------------
	CreateSimulatedSchedulingScores(context.Context, *scores.CreateSimulatedSchedulingScoresRequest) (*status.Status, error)
	// Used to list system scores
	ListSimulatedSchedulingScores(context.Context, *scores.ListSimulatedSchedulingScoresRequest) (*scores.ListSimulatedSchedulingScoresResponse, error)
	// weave scope --------------------------------------------------
	ListWeaveScopeHosts(context.Context, *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeHostDetails(context.Context, *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopePods(context.Context, *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopePodDetails(context.Context, *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainers(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByHostname(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
	ListWeaveScopeContainersByImage(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
	GetWeaveScopeContainerDetails(context.Context, *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error)
}

// UnimplementedDatahubServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDatahubServiceServer struct {
}

func (*UnimplementedDatahubServiceServer) CreateEvents(ctx context.Context, req *events.CreateEventsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateEvents not implemented")
}
func (*UnimplementedDatahubServiceServer) ListEvents(ctx context.Context, req *events.ListEventsRequest) (*events.ListEventsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListEvents not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateGpuPredictions(ctx context.Context, req *gpu.CreateGpuPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateGpuPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListGpus(ctx context.Context, req *gpu.ListGpusRequest) (*gpu.ListGpusResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListGpus not implemented")
}
func (*UnimplementedDatahubServiceServer) ListGpuMetrics(ctx context.Context, req *gpu.ListGpuMetricsRequest) (*gpu.ListGpuMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListGpuMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListGpuPredictions(ctx context.Context, req *gpu.ListGpuPredictionsRequest) (*gpu.ListGpuPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListGpuPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) GetLicense(ctx context.Context, req *empty.Empty) (*licenses.GetLicenseResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetLicense not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodMetrics(ctx context.Context, req *metrics.CreatePodMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllerMetrics(ctx context.Context, req *metrics.CreateControllerMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllerMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateApplicationMetrics(ctx context.Context, req *metrics.CreateApplicationMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateApplicationMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNamespaceMetrics(ctx context.Context, req *metrics.CreateNamespaceMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNamespaceMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodeMetrics(ctx context.Context, req *metrics.CreateNodeMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodeMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateClusterMetrics(ctx context.Context, req *metrics.CreateClusterMetricsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateClusterMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodMetrics(ctx context.Context, req *metrics.ListPodMetricsRequest) (*metrics.ListPodMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllerMetrics(ctx context.Context, req *metrics.ListControllerMetricsRequest) (*metrics.ListControllerMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllerMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListApplicationMetrics(ctx context.Context, req *metrics.ListApplicationMetricsRequest) (*metrics.ListApplicationMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApplicationMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNamespaceMetrics(ctx context.Context, req *metrics.ListNamespaceMetricsRequest) (*metrics.ListNamespaceMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNamespaceMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodeMetrics(ctx context.Context, req *metrics.ListNodeMetricsRequest) (*metrics.ListNodeMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodeMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) ListClusterMetrics(ctx context.Context, req *metrics.ListClusterMetricsRequest) (*metrics.ListClusterMetricsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListClusterMetrics not implemented")
}
func (*UnimplementedDatahubServiceServer) Ping(ctx context.Context, req *empty.Empty) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodPlannings(ctx context.Context, req *plannings.CreatePodPlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllerPlannings(ctx context.Context, req *plannings.CreateControllerPlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllerPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateApplicationPlannings(ctx context.Context, req *plannings.CreateApplicationPlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateApplicationPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNamespacePlannings(ctx context.Context, req *plannings.CreateNamespacePlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNamespacePlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodePlannings(ctx context.Context, req *plannings.CreateNodePlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodePlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateClusterPlannings(ctx context.Context, req *plannings.CreateClusterPlanningsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateClusterPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodPlannings(ctx context.Context, req *plannings.ListPodPlanningsRequest) (*plannings.ListPodPlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllerPlannings(ctx context.Context, req *plannings.ListControllerPlanningsRequest) (*plannings.ListControllerPlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllerPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListApplicationPlannings(ctx context.Context, req *plannings.ListApplicationPlanningsRequest) (*plannings.ListApplicationPlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApplicationPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNamespacePlannings(ctx context.Context, req *plannings.ListNamespacePlanningsRequest) (*plannings.ListNamespacePlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNamespacePlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodePlannings(ctx context.Context, req *plannings.ListNodePlanningsRequest) (*plannings.ListNodePlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodePlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) ListClusterPlannings(ctx context.Context, req *plannings.ListClusterPlanningsRequest) (*plannings.ListClusterPlanningsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListClusterPlannings not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodPredictions(ctx context.Context, req *predictions.CreatePodPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllerPredictions(ctx context.Context, req *predictions.CreateControllerPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllerPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateApplicationPredictions(ctx context.Context, req *predictions.CreateApplicationPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateApplicationPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNamespacePredictions(ctx context.Context, req *predictions.CreateNamespacePredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNamespacePredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodePredictions(ctx context.Context, req *predictions.CreateNodePredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodePredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateClusterPredictions(ctx context.Context, req *predictions.CreateClusterPredictionsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateClusterPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodPredictions(ctx context.Context, req *predictions.ListPodPredictionsRequest) (*predictions.ListPodPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllerPredictions(ctx context.Context, req *predictions.ListControllerPredictionsRequest) (*predictions.ListControllerPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllerPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListApplicationPredictions(ctx context.Context, req *predictions.ListApplicationPredictionsRequest) (*predictions.ListApplicationPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApplicationPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNamespacePredictions(ctx context.Context, req *predictions.ListNamespacePredictionsRequest) (*predictions.ListNamespacePredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNamespacePredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodePredictions(ctx context.Context, req *predictions.ListNodePredictionsRequest) (*predictions.ListNodePredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodePredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ListClusterPredictions(ctx context.Context, req *predictions.ListClusterPredictionsRequest) (*predictions.ListClusterPredictionsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListClusterPredictions not implemented")
}
func (*UnimplementedDatahubServiceServer) ReadRawdata(ctx context.Context, req *rawdata.ReadRawdataRequest) (*rawdata.ReadRawdataResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ReadRawdata not implemented")
}
func (*UnimplementedDatahubServiceServer) WriteRawdata(ctx context.Context, req *rawdata.WriteRawdataRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method WriteRawdata not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePodRecommendations(ctx context.Context, req *recommendations.CreatePodRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePodRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllerRecommendations(ctx context.Context, req *recommendations.CreateControllerRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllerRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateApplicationRecommendations(ctx context.Context, req *recommendations.CreateApplicationRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateApplicationRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNamespaceRecommendations(ctx context.Context, req *recommendations.CreateNamespaceRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNamespaceRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodeRecommendations(ctx context.Context, req *recommendations.CreateNodeRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodeRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateClusterRecommendations(ctx context.Context, req *recommendations.CreateClusterRecommendationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateClusterRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPodRecommendations(ctx context.Context, req *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPodRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListAvailablePodRecommendations(ctx context.Context, req *recommendations.ListPodRecommendationsRequest) (*recommendations.ListPodRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListAvailablePodRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllerRecommendations(ctx context.Context, req *recommendations.ListControllerRecommendationsRequest) (*recommendations.ListControllerRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllerRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListApplicationRecommendations(ctx context.Context, req *recommendations.ListApplicationRecommendationsRequest) (*recommendations.ListApplicationRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApplicationRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNamespaceRecommendations(ctx context.Context, req *recommendations.ListNamespaceRecommendationsRequest) (*recommendations.ListNamespaceRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNamespaceRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodeRecommendations(ctx context.Context, req *recommendations.ListNodeRecommendationsRequest) (*recommendations.ListNodeRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodeRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) ListClusterRecommendations(ctx context.Context, req *recommendations.ListClusterRecommendationsRequest) (*recommendations.ListClusterRecommendationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListClusterRecommendations not implemented")
}
func (*UnimplementedDatahubServiceServer) CreatePods(ctx context.Context, req *resources.CreatePodsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreatePods not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateControllers(ctx context.Context, req *resources.CreateControllersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateControllers not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateApplications(ctx context.Context, req *resources.CreateApplicationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateApplications not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNamespaces(ctx context.Context, req *resources.CreateNamespacesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNamespaces not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateNodes(ctx context.Context, req *resources.CreateNodesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateNodes not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateClusters(ctx context.Context, req *resources.CreateClustersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateClusters not implemented")
}
func (*UnimplementedDatahubServiceServer) ListPods(ctx context.Context, req *resources.ListPodsRequest) (*resources.ListPodsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListPods not implemented")
}
func (*UnimplementedDatahubServiceServer) ListControllers(ctx context.Context, req *resources.ListControllersRequest) (*resources.ListControllersResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListControllers not implemented")
}
func (*UnimplementedDatahubServiceServer) ListApplications(ctx context.Context, req *resources.ListApplicationsRequest) (*resources.ListApplicationsResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListApplications not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNamespaces(ctx context.Context, req *resources.ListNamespacesRequest) (*resources.ListNamespacesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (*UnimplementedDatahubServiceServer) ListNodes(ctx context.Context, req *resources.ListNodesRequest) (*resources.ListNodesResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListNodes not implemented")
}
func (*UnimplementedDatahubServiceServer) ListClusters(ctx context.Context, req *resources.ListClustersRequest) (*resources.ListClustersResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (*UnimplementedDatahubServiceServer) DeletePods(ctx context.Context, req *resources.DeletePodsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeletePods not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteControllers(ctx context.Context, req *resources.DeleteControllersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteControllers not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteApplications(ctx context.Context, req *resources.DeleteApplicationsRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteApplications not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteNamespaces(ctx context.Context, req *resources.DeleteNamespacesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNamespaces not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteNodes(ctx context.Context, req *resources.DeleteNodesRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteNodes not implemented")
}
func (*UnimplementedDatahubServiceServer) DeleteClusters(ctx context.Context, req *resources.DeleteClustersRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method DeleteClusters not implemented")
}
func (*UnimplementedDatahubServiceServer) CreateSimulatedSchedulingScores(ctx context.Context, req *scores.CreateSimulatedSchedulingScoresRequest) (*status.Status, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method CreateSimulatedSchedulingScores not implemented")
}
func (*UnimplementedDatahubServiceServer) ListSimulatedSchedulingScores(ctx context.Context, req *scores.ListSimulatedSchedulingScoresRequest) (*scores.ListSimulatedSchedulingScoresResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListSimulatedSchedulingScores not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeHosts(ctx context.Context, req *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeHosts not implemented")
}
func (*UnimplementedDatahubServiceServer) GetWeaveScopeHostDetails(ctx context.Context, req *weavescope.ListWeaveScopeHostsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWeaveScopeHostDetails not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopePods(ctx context.Context, req *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopePods not implemented")
}
func (*UnimplementedDatahubServiceServer) GetWeaveScopePodDetails(ctx context.Context, req *weavescope.ListWeaveScopePodsRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWeaveScopePodDetails not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeContainers(ctx context.Context, req *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeContainers not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeContainersByHostname(ctx context.Context, req *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeContainersByHostname not implemented")
}
func (*UnimplementedDatahubServiceServer) ListWeaveScopeContainersByImage(ctx context.Context, req *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method ListWeaveScopeContainersByImage not implemented")
}
func (*UnimplementedDatahubServiceServer) GetWeaveScopeContainerDetails(ctx context.Context, req *weavescope.ListWeaveScopeContainersRequest) (*weavescope.WeaveScopeResponse, error) {
	return nil, status1.Errorf(codes.Unimplemented, "method GetWeaveScopeContainerDetails not implemented")
}

func RegisterDatahubServiceServer(s *grpc.Server, srv DatahubServiceServer) {
	s.RegisterService(&_DatahubService_serviceDesc, srv)
}

func _DatahubService_CreateEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.CreateEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateEvents(ctx, req.(*events.CreateEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListEvents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(events.ListEventsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListEvents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListEvents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListEvents(ctx, req.(*events.ListEventsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateGpuPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.CreateGpuPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateGpuPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateGpuPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateGpuPredictions(ctx, req.(*gpu.CreateGpuPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListGpus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.ListGpusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListGpus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListGpus(ctx, req.(*gpu.ListGpusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListGpuMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.ListGpuMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListGpuMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpuMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListGpuMetrics(ctx, req.(*gpu.ListGpuMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListGpuPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gpu.ListGpuPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListGpuPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListGpuPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListGpuPredictions(ctx, req.(*gpu.ListGpuPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetLicense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetLicense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/GetLicense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetLicense(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreatePodMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodMetrics(ctx, req.(*metrics.CreatePodMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateControllerMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllerMetrics(ctx, req.(*metrics.CreateControllerMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateApplicationMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateApplicationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateApplicationMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateApplicationMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateApplicationMetrics(ctx, req.(*metrics.CreateApplicationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNamespaceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateNamespaceMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNamespaceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNamespaceMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNamespaceMetrics(ctx, req.(*metrics.CreateNamespaceMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateNodeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodeMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodeMetrics(ctx, req.(*metrics.CreateNodeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateClusterMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.CreateClusterMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateClusterMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateClusterMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateClusterMetrics(ctx, req.(*metrics.CreateClusterMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListPodMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodMetrics(ctx, req.(*metrics.ListPodMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllerMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListControllerMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllerMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllerMetrics(ctx, req.(*metrics.ListControllerMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListApplicationMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListApplicationMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListApplicationMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListApplicationMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListApplicationMetrics(ctx, req.(*metrics.ListApplicationMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNamespaceMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListNamespaceMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNamespaceMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNamespaceMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNamespaceMetrics(ctx, req.(*metrics.ListNamespaceMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodeMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListNodeMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodeMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodeMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodeMetrics(ctx, req.(*metrics.ListNodeMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListClusterMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(metrics.ListClusterMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListClusterMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListClusterMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListClusterMetrics(ctx, req.(*metrics.ListClusterMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreatePodPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodPlannings(ctx, req.(*plannings.CreatePodPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllerPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreateControllerPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllerPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllerPlannings(ctx, req.(*plannings.CreateControllerPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateApplicationPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreateApplicationPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateApplicationPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateApplicationPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateApplicationPlannings(ctx, req.(*plannings.CreateApplicationPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNamespacePlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreateNamespacePlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNamespacePlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNamespacePlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNamespacePlannings(ctx, req.(*plannings.CreateNamespacePlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodePlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreateNodePlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodePlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodePlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodePlannings(ctx, req.(*plannings.CreateNodePlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateClusterPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.CreateClusterPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateClusterPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateClusterPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateClusterPlannings(ctx, req.(*plannings.CreateClusterPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListPodPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodPlannings(ctx, req.(*plannings.ListPodPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllerPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListControllerPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllerPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllerPlannings(ctx, req.(*plannings.ListControllerPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListApplicationPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListApplicationPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListApplicationPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListApplicationPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListApplicationPlannings(ctx, req.(*plannings.ListApplicationPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNamespacePlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListNamespacePlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNamespacePlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNamespacePlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNamespacePlannings(ctx, req.(*plannings.ListNamespacePlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodePlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListNodePlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodePlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodePlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodePlannings(ctx, req.(*plannings.ListNodePlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListClusterPlannings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(plannings.ListClusterPlanningsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListClusterPlannings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListClusterPlannings",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListClusterPlannings(ctx, req.(*plannings.ListClusterPlanningsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreatePodPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodPredictions(ctx, req.(*predictions.CreatePodPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllerPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreateControllerPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllerPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllerPredictions(ctx, req.(*predictions.CreateControllerPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateApplicationPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreateApplicationPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateApplicationPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateApplicationPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateApplicationPredictions(ctx, req.(*predictions.CreateApplicationPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNamespacePredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreateNamespacePredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNamespacePredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNamespacePredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNamespacePredictions(ctx, req.(*predictions.CreateNamespacePredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodePredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreateNodePredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodePredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodePredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodePredictions(ctx, req.(*predictions.CreateNodePredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateClusterPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.CreateClusterPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateClusterPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateClusterPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateClusterPredictions(ctx, req.(*predictions.CreateClusterPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListPodPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodPredictions(ctx, req.(*predictions.ListPodPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllerPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListControllerPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllerPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllerPredictions(ctx, req.(*predictions.ListControllerPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListApplicationPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListApplicationPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListApplicationPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListApplicationPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListApplicationPredictions(ctx, req.(*predictions.ListApplicationPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNamespacePredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListNamespacePredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNamespacePredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNamespacePredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNamespacePredictions(ctx, req.(*predictions.ListNamespacePredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodePredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListNodePredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodePredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodePredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodePredictions(ctx, req.(*predictions.ListNodePredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListClusterPredictions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(predictions.ListClusterPredictionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListClusterPredictions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListClusterPredictions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListClusterPredictions(ctx, req.(*predictions.ListClusterPredictionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ReadRawdata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rawdata.ReadRawdataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ReadRawdata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ReadRawdata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ReadRawdata(ctx, req.(*rawdata.ReadRawdataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_WriteRawdata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(rawdata.WriteRawdataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).WriteRawdata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/WriteRawdata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).WriteRawdata(ctx, req.(*rawdata.WriteRawdataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePodRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreatePodRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePodRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePodRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePodRecommendations(ctx, req.(*recommendations.CreatePodRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllerRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateControllerRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllerRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllerRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllerRecommendations(ctx, req.(*recommendations.CreateControllerRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateApplicationRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateApplicationRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateApplicationRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateApplicationRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateApplicationRecommendations(ctx, req.(*recommendations.CreateApplicationRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNamespaceRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateNamespaceRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNamespaceRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNamespaceRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNamespaceRecommendations(ctx, req.(*recommendations.CreateNamespaceRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodeRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateNodeRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodeRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodeRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodeRecommendations(ctx, req.(*recommendations.CreateNodeRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateClusterRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.CreateClusterRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateClusterRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateClusterRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateClusterRecommendations(ctx, req.(*recommendations.CreateClusterRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPodRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListPodRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPodRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPodRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPodRecommendations(ctx, req.(*recommendations.ListPodRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListAvailablePodRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListPodRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListAvailablePodRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListAvailablePodRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListAvailablePodRecommendations(ctx, req.(*recommendations.ListPodRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllerRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListControllerRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllerRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllerRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllerRecommendations(ctx, req.(*recommendations.ListControllerRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListApplicationRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListApplicationRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListApplicationRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListApplicationRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListApplicationRecommendations(ctx, req.(*recommendations.ListApplicationRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNamespaceRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListNamespaceRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNamespaceRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNamespaceRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNamespaceRecommendations(ctx, req.(*recommendations.ListNamespaceRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodeRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListNodeRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodeRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodeRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodeRecommendations(ctx, req.(*recommendations.ListNodeRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListClusterRecommendations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommendations.ListClusterRecommendationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListClusterRecommendations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListClusterRecommendations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListClusterRecommendations(ctx, req.(*recommendations.ListClusterRecommendationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreatePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreatePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreatePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreatePods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreatePods(ctx, req.(*resources.CreatePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateControllers(ctx, req.(*resources.CreateControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateApplications(ctx, req.(*resources.CreateApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNamespaces(ctx, req.(*resources.CreateNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateNodes(ctx, req.(*resources.CreateNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.CreateClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateClusters(ctx, req.(*resources.CreateClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListPods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListPodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListPods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListPods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListPods(ctx, req.(*resources.ListPodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListControllers(ctx, req.(*resources.ListControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListApplications(ctx, req.(*resources.ListApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNamespaces(ctx, req.(*resources.ListNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListNodes(ctx, req.(*resources.ListNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListClusters(ctx, req.(*resources.ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeletePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeletePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeletePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/DeletePods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeletePods(ctx, req.(*resources.DeletePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteControllers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteControllersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteControllers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteControllers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteControllers(ctx, req.(*resources.DeleteControllersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteApplicationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteApplications(ctx, req.(*resources.DeleteApplicationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteNamespacesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteNamespaces(ctx, req.(*resources.DeleteNamespacesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteNodes(ctx, req.(*resources.DeleteNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_DeleteClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(resources.DeleteClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).DeleteClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/DeleteClusters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).DeleteClusters(ctx, req.(*resources.DeleteClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_CreateSimulatedSchedulingScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(scores.CreateSimulatedSchedulingScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).CreateSimulatedSchedulingScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/CreateSimulatedSchedulingScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).CreateSimulatedSchedulingScores(ctx, req.(*scores.CreateSimulatedSchedulingScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListSimulatedSchedulingScores_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(scores.ListSimulatedSchedulingScoresRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListSimulatedSchedulingScores(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListSimulatedSchedulingScores",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListSimulatedSchedulingScores(ctx, req.(*scores.ListSimulatedSchedulingScoresRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeHosts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeHosts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeHosts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeHosts(ctx, req.(*weavescope.ListWeaveScopeHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetWeaveScopeHostDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeHostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetWeaveScopeHostDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopeHostDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetWeaveScopeHostDetails(ctx, req.(*weavescope.ListWeaveScopeHostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopePods_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopePods(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopePods",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopePods(ctx, req.(*weavescope.ListWeaveScopePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetWeaveScopePodDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopePodsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetWeaveScopePodDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopePodDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetWeaveScopePodDetails(ctx, req.(*weavescope.ListWeaveScopePodsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeContainers(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeContainersByHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainersByHostname",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByHostname(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_ListWeaveScopeContainersByImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/ListWeaveScopeContainersByImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).ListWeaveScopeContainersByImage(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatahubService_GetWeaveScopeContainerDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(weavescope.ListWeaveScopeContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatahubServiceServer).GetWeaveScopeContainerDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containersai.alameda.v1alpha1.datahub.DatahubService/GetWeaveScopeContainerDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatahubServiceServer).GetWeaveScopeContainerDetails(ctx, req.(*weavescope.ListWeaveScopeContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DatahubService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "containersai.alameda.v1alpha1.datahub.DatahubService",
	HandlerType: (*DatahubServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvents",
			Handler:    _DatahubService_CreateEvents_Handler,
		},
		{
			MethodName: "ListEvents",
			Handler:    _DatahubService_ListEvents_Handler,
		},
		{
			MethodName: "CreateGpuPredictions",
			Handler:    _DatahubService_CreateGpuPredictions_Handler,
		},
		{
			MethodName: "ListGpus",
			Handler:    _DatahubService_ListGpus_Handler,
		},
		{
			MethodName: "ListGpuMetrics",
			Handler:    _DatahubService_ListGpuMetrics_Handler,
		},
		{
			MethodName: "ListGpuPredictions",
			Handler:    _DatahubService_ListGpuPredictions_Handler,
		},
		{
			MethodName: "GetLicense",
			Handler:    _DatahubService_GetLicense_Handler,
		},
		{
			MethodName: "CreatePodMetrics",
			Handler:    _DatahubService_CreatePodMetrics_Handler,
		},
		{
			MethodName: "CreateControllerMetrics",
			Handler:    _DatahubService_CreateControllerMetrics_Handler,
		},
		{
			MethodName: "CreateApplicationMetrics",
			Handler:    _DatahubService_CreateApplicationMetrics_Handler,
		},
		{
			MethodName: "CreateNamespaceMetrics",
			Handler:    _DatahubService_CreateNamespaceMetrics_Handler,
		},
		{
			MethodName: "CreateNodeMetrics",
			Handler:    _DatahubService_CreateNodeMetrics_Handler,
		},
		{
			MethodName: "CreateClusterMetrics",
			Handler:    _DatahubService_CreateClusterMetrics_Handler,
		},
		{
			MethodName: "ListPodMetrics",
			Handler:    _DatahubService_ListPodMetrics_Handler,
		},
		{
			MethodName: "ListControllerMetrics",
			Handler:    _DatahubService_ListControllerMetrics_Handler,
		},
		{
			MethodName: "ListApplicationMetrics",
			Handler:    _DatahubService_ListApplicationMetrics_Handler,
		},
		{
			MethodName: "ListNamespaceMetrics",
			Handler:    _DatahubService_ListNamespaceMetrics_Handler,
		},
		{
			MethodName: "ListNodeMetrics",
			Handler:    _DatahubService_ListNodeMetrics_Handler,
		},
		{
			MethodName: "ListClusterMetrics",
			Handler:    _DatahubService_ListClusterMetrics_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _DatahubService_Ping_Handler,
		},
		{
			MethodName: "CreatePodPlannings",
			Handler:    _DatahubService_CreatePodPlannings_Handler,
		},
		{
			MethodName: "CreateControllerPlannings",
			Handler:    _DatahubService_CreateControllerPlannings_Handler,
		},
		{
			MethodName: "CreateApplicationPlannings",
			Handler:    _DatahubService_CreateApplicationPlannings_Handler,
		},
		{
			MethodName: "CreateNamespacePlannings",
			Handler:    _DatahubService_CreateNamespacePlannings_Handler,
		},
		{
			MethodName: "CreateNodePlannings",
			Handler:    _DatahubService_CreateNodePlannings_Handler,
		},
		{
			MethodName: "CreateClusterPlannings",
			Handler:    _DatahubService_CreateClusterPlannings_Handler,
		},
		{
			MethodName: "ListPodPlannings",
			Handler:    _DatahubService_ListPodPlannings_Handler,
		},
		{
			MethodName: "ListControllerPlannings",
			Handler:    _DatahubService_ListControllerPlannings_Handler,
		},
		{
			MethodName: "ListApplicationPlannings",
			Handler:    _DatahubService_ListApplicationPlannings_Handler,
		},
		{
			MethodName: "ListNamespacePlannings",
			Handler:    _DatahubService_ListNamespacePlannings_Handler,
		},
		{
			MethodName: "ListNodePlannings",
			Handler:    _DatahubService_ListNodePlannings_Handler,
		},
		{
			MethodName: "ListClusterPlannings",
			Handler:    _DatahubService_ListClusterPlannings_Handler,
		},
		{
			MethodName: "CreatePodPredictions",
			Handler:    _DatahubService_CreatePodPredictions_Handler,
		},
		{
			MethodName: "CreateControllerPredictions",
			Handler:    _DatahubService_CreateControllerPredictions_Handler,
		},
		{
			MethodName: "CreateApplicationPredictions",
			Handler:    _DatahubService_CreateApplicationPredictions_Handler,
		},
		{
			MethodName: "CreateNamespacePredictions",
			Handler:    _DatahubService_CreateNamespacePredictions_Handler,
		},
		{
			MethodName: "CreateNodePredictions",
			Handler:    _DatahubService_CreateNodePredictions_Handler,
		},
		{
			MethodName: "CreateClusterPredictions",
			Handler:    _DatahubService_CreateClusterPredictions_Handler,
		},
		{
			MethodName: "ListPodPredictions",
			Handler:    _DatahubService_ListPodPredictions_Handler,
		},
		{
			MethodName: "ListControllerPredictions",
			Handler:    _DatahubService_ListControllerPredictions_Handler,
		},
		{
			MethodName: "ListApplicationPredictions",
			Handler:    _DatahubService_ListApplicationPredictions_Handler,
		},
		{
			MethodName: "ListNamespacePredictions",
			Handler:    _DatahubService_ListNamespacePredictions_Handler,
		},
		{
			MethodName: "ListNodePredictions",
			Handler:    _DatahubService_ListNodePredictions_Handler,
		},
		{
			MethodName: "ListClusterPredictions",
			Handler:    _DatahubService_ListClusterPredictions_Handler,
		},
		{
			MethodName: "ReadRawdata",
			Handler:    _DatahubService_ReadRawdata_Handler,
		},
		{
			MethodName: "WriteRawdata",
			Handler:    _DatahubService_WriteRawdata_Handler,
		},
		{
			MethodName: "CreatePodRecommendations",
			Handler:    _DatahubService_CreatePodRecommendations_Handler,
		},
		{
			MethodName: "CreateControllerRecommendations",
			Handler:    _DatahubService_CreateControllerRecommendations_Handler,
		},
		{
			MethodName: "CreateApplicationRecommendations",
			Handler:    _DatahubService_CreateApplicationRecommendations_Handler,
		},
		{
			MethodName: "CreateNamespaceRecommendations",
			Handler:    _DatahubService_CreateNamespaceRecommendations_Handler,
		},
		{
			MethodName: "CreateNodeRecommendations",
			Handler:    _DatahubService_CreateNodeRecommendations_Handler,
		},
		{
			MethodName: "CreateClusterRecommendations",
			Handler:    _DatahubService_CreateClusterRecommendations_Handler,
		},
		{
			MethodName: "ListPodRecommendations",
			Handler:    _DatahubService_ListPodRecommendations_Handler,
		},
		{
			MethodName: "ListAvailablePodRecommendations",
			Handler:    _DatahubService_ListAvailablePodRecommendations_Handler,
		},
		{
			MethodName: "ListControllerRecommendations",
			Handler:    _DatahubService_ListControllerRecommendations_Handler,
		},
		{
			MethodName: "ListApplicationRecommendations",
			Handler:    _DatahubService_ListApplicationRecommendations_Handler,
		},
		{
			MethodName: "ListNamespaceRecommendations",
			Handler:    _DatahubService_ListNamespaceRecommendations_Handler,
		},
		{
			MethodName: "ListNodeRecommendations",
			Handler:    _DatahubService_ListNodeRecommendations_Handler,
		},
		{
			MethodName: "ListClusterRecommendations",
			Handler:    _DatahubService_ListClusterRecommendations_Handler,
		},
		{
			MethodName: "CreatePods",
			Handler:    _DatahubService_CreatePods_Handler,
		},
		{
			MethodName: "CreateControllers",
			Handler:    _DatahubService_CreateControllers_Handler,
		},
		{
			MethodName: "CreateApplications",
			Handler:    _DatahubService_CreateApplications_Handler,
		},
		{
			MethodName: "CreateNamespaces",
			Handler:    _DatahubService_CreateNamespaces_Handler,
		},
		{
			MethodName: "CreateNodes",
			Handler:    _DatahubService_CreateNodes_Handler,
		},
		{
			MethodName: "CreateClusters",
			Handler:    _DatahubService_CreateClusters_Handler,
		},
		{
			MethodName: "ListPods",
			Handler:    _DatahubService_ListPods_Handler,
		},
		{
			MethodName: "ListControllers",
			Handler:    _DatahubService_ListControllers_Handler,
		},
		{
			MethodName: "ListApplications",
			Handler:    _DatahubService_ListApplications_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _DatahubService_ListNamespaces_Handler,
		},
		{
			MethodName: "ListNodes",
			Handler:    _DatahubService_ListNodes_Handler,
		},
		{
			MethodName: "ListClusters",
			Handler:    _DatahubService_ListClusters_Handler,
		},
		{
			MethodName: "DeletePods",
			Handler:    _DatahubService_DeletePods_Handler,
		},
		{
			MethodName: "DeleteControllers",
			Handler:    _DatahubService_DeleteControllers_Handler,
		},
		{
			MethodName: "DeleteApplications",
			Handler:    _DatahubService_DeleteApplications_Handler,
		},
		{
			MethodName: "DeleteNamespaces",
			Handler:    _DatahubService_DeleteNamespaces_Handler,
		},
		{
			MethodName: "DeleteNodes",
			Handler:    _DatahubService_DeleteNodes_Handler,
		},
		{
			MethodName: "DeleteClusters",
			Handler:    _DatahubService_DeleteClusters_Handler,
		},
		{
			MethodName: "CreateSimulatedSchedulingScores",
			Handler:    _DatahubService_CreateSimulatedSchedulingScores_Handler,
		},
		{
			MethodName: "ListSimulatedSchedulingScores",
			Handler:    _DatahubService_ListSimulatedSchedulingScores_Handler,
		},
		{
			MethodName: "ListWeaveScopeHosts",
			Handler:    _DatahubService_ListWeaveScopeHosts_Handler,
		},
		{
			MethodName: "GetWeaveScopeHostDetails",
			Handler:    _DatahubService_GetWeaveScopeHostDetails_Handler,
		},
		{
			MethodName: "ListWeaveScopePods",
			Handler:    _DatahubService_ListWeaveScopePods_Handler,
		},
		{
			MethodName: "GetWeaveScopePodDetails",
			Handler:    _DatahubService_GetWeaveScopePodDetails_Handler,
		},
		{
			MethodName: "ListWeaveScopeContainers",
			Handler:    _DatahubService_ListWeaveScopeContainers_Handler,
		},
		{
			MethodName: "ListWeaveScopeContainersByHostname",
			Handler:    _DatahubService_ListWeaveScopeContainersByHostname_Handler,
		},
		{
			MethodName: "ListWeaveScopeContainersByImage",
			Handler:    _DatahubService_ListWeaveScopeContainersByImage_Handler,
		},
		{
			MethodName: "GetWeaveScopeContainerDetails",
			Handler:    _DatahubService_GetWeaveScopeContainerDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alameda_api/v1alpha1/datahub/server.proto",
}
